# 跨界探索者现代化个人站点开发规则

## 项目概述
这是一个基于 Next.js 14 + 现代化技术栈的"跨界探索者"个人站点项目，需要打造极具未来感和互动性的个人品牌站点，完美体现跨界探索者创新进取的IP特色，并支持社交平台整合和GlimmerLab品牌展示。

## 核心原则
1. **技术前沿性**：使用最新的Web技术栈，体现跨界探索者的技术追求
2. **IP特色突出**：完美体现"跨界探索者"人设，创新进取但不失专业性
3. **用户体验至上**：极致的动画和交互体验，未来感的视觉设计
4. **社交整合**：深度整合各社交平台，建立完整的个人品牌生态
5. **性能优化**：现代化的性能优化，确保流畅的用户体验
6. **扩展性强**：支持未来功能扩展和技术升级
7. **美观性优先**：确保内容结构清晰、排版美观、可读性强

## 技术栈
- Next.js 14 (App Router)
- TypeScript 5.x
- Tailwind CSS + Framer Motion
- Anime.js 4.0 + Three.js + WebGPU
- WebAudio API + Web Workers + WebAssembly
- MDX + Contentlayer

## 文件结构规范

### 📁 完整项目结构
```
tech-fail-blog/
├── app/                          # Next.js App Router
│   ├── layout.tsx               # 根布局组件
│   ├── page.tsx                 # 首页组件
│   ├── globals.css              # 全局样式
│   ├── blog/                    # 博客页面
│   │   ├── page.tsx            # 博客列表页
│   │   ├── [slug]/             # 动态博客页面
│   │   └── layout.tsx          # 博客布局
│   ├── projects/                # 项目展示页面
│   │   ├── page.tsx            # 项目列表
│   │   ├── [id]/               # 项目详情页
│   │   └── layout.tsx          # 项目布局
│   ├── about/                   # 关于页面
│   │   ├── page.tsx            # 关于我
│   │   └── layout.tsx          # 关于页面布局
│   ├── glimmerlab/              # GlimmerLab品牌页面
│   │   ├── page.tsx            # 品牌主页
│   │   ├── projects/           # 品牌项目
│   │   └── layout.tsx          # 品牌页面布局
│   ├── not-found.tsx           # 404错误页面
│   ├── loading.tsx             # 全局加载页面
│   ├── error.tsx               # 全局错误页面
│   └── api/                     # API路由
│       ├── social/             # 社交平台API
│       ├── analytics/          # 数据分析API
│       └── contact/            # 联系表单API
├── components/                   # React组件库
│   ├── ui/                      # 基础UI组件
│   │   ├── Button.tsx          # 按钮组件
│   │   ├── Card.tsx            # 卡片组件
│   │   ├── Modal.tsx           # 模态框组件
│   │   ├── LoadingSpinner.tsx  # 加载动画组件
│   │   ├── SvgIcons.tsx        # SVG图标组件
│   │   └── index.ts            # 组件导出
│   ├── animations/              # 动画组件
│   │   ├── FailAnimation.tsx   # 废柴翻车动画
│   │   ├── LoadingAnimation.tsx # 加载动画
│   │   ├── TypewriterEffect.tsx # 打字机效果
│   │   └── index.ts            # 动画组件导出
│   ├── three/                   # 3D组件
│   │   ├── TechFailPlanet.tsx  # 废柴星球
│   │   ├── FloatingParticles.tsx # 浮动粒子
│   │   ├── InteractiveLogo.tsx # 交互式Logo
│   │   └── index.ts            # 3D组件导出
│   ├── layout/                  # 布局组件
│   │   ├── Header.tsx          # 头部导航
│   │   ├── Footer.tsx          # 底部信息
│   │   ├── Sidebar.tsx         # 侧边栏
│   │   └── Navigation.tsx      # 导航组件
│   ├── home/                    # 首页组件
│   │   ├── HeroSection.tsx     # 英雄区域
│   │   ├── FeaturedPosts.tsx   # 精选文章
│   │   ├── TechStack.tsx       # 技术栈展示
│   │   ├── GlimmerLabIntro.tsx # GlimmerLab介绍
│   │   └── SocialLinks.tsx     # 社交链接
│   ├── blog/                    # 博客相关组件
│   │   ├── PostCard.tsx        # 文章卡片
│   │   ├── PostList.tsx        # 文章列表
│   │   ├── BlogList.tsx        # 博客列表
│   │   ├── BlogSidebar.tsx     # 博客侧边栏
│   │   ├── TagCloud.tsx        # 标签云
│   │   └── CommentSection.tsx  # 评论区域
│   ├── projects/                # 项目相关组件
│   │   ├── ProjectCard.tsx     # 项目卡片
│   │   ├── ProjectGrid.tsx     # 项目网格
│   │   ├── ProjectFilters.tsx  # 项目筛选器
│   │   └── ProjectHero.tsx     # 项目英雄区域
│   ├── about/                   # 关于页面组件
│   │   ├── AboutHero.tsx       # 关于英雄区域
│   │   ├── AboutTimeline.tsx   # 成长时间线
│   │   ├── AboutSkills.tsx     # 技能展示
│   │   └── AboutPhilosophy.tsx # 技术哲学
│   └── social/                  # 社交平台组件
│       ├── SocialLinks.tsx     # 社交链接
│       ├── ShareButtons.tsx    # 分享按钮
│       └── PlatformStatus.tsx  # 平台状态
├── lib/                         # 工具库
│   ├── animations/              # 动画工具
│   │   ├── failAnimations.ts   # 废柴动画预设
│   │   ├── loadingAnimations.ts # 加载动画预设
│   │   └── index.ts            # 动画工具导出
│   ├── audio/                   # 音频工具
│   │   ├── FailSoundSystem.ts  # 废柴音效系统
│   │   ├── AudioManager.ts     # 音频管理器
│   │   └── index.ts            # 音频工具导出
│   ├── three/                   # 3D工具
│   │   ├── ThreeUtils.ts       # Three.js工具
│   │   ├── WebGPUUtils.ts      # WebGPU工具
│   │   └── index.ts            # 3D工具导出
│   ├── utils/                   # 通用工具
│   │   ├── constants.ts        # 常量定义
│   │   ├── helpers.ts          # 辅助函数
│   │   ├── types.ts            # 类型定义
│   │   └── index.ts            # 工具导出
│   └── content/                 # 内容管理
│       ├── mdx.ts              # MDX处理
│       ├── social.ts           # 社交平台数据
│       └── projects.ts         # 项目数据
├── content/                     # MDX内容文件
│   ├── blog/                    # 博客文章
│   │   ├── ai/                 # AI技术文章
│   │   ├── notes/              # 学习笔记
│   │   ├── game/               # 游戏开发文章
│   │   ├── cs/                 # 计算机技术文章
│   │   ├── freetalk/           # 杂谈文章
│   │   ├── algorithm/          # 算法文章
│   │   ├── ee/                 # 硬件电子文章
│   │   └── README.md           # 博客说明文档
│   ├── projects/                # 项目文档
│   │   ├── glimmerlab/         # GlimmerLab项目
│   │   ├── personal/           # 个人项目
│   │   └── collaborations/     # 合作项目
│   └── pages/                   # 静态页面
│       ├── about.mdx           # 关于页面
│       ├── contact.mdx         # 联系页面
│       └── privacy.mdx         # 隐私政策
├── styles/                      # 样式文件
│   ├── globals.css              # 全局样式
│   ├── animations.css           # 动画样式
│   ├── components.css           # 组件样式
│   └── themes/                  # 主题样式
│       ├── light.css           # 浅色主题
│       ├── dark.css            # 深色主题
│       └── cyber.css           # 赛博朋克主题
├── public/                      # 静态资源
│   ├── images/                  # 图片资源
│   │   ├── avatars/            # 头像图片
│   │   ├── projects/           # 项目图片
│   │   ├── blog/               # 博客配图
│   │   └── icons/              # 图标资源
│   ├── audio/                   # 音频资源
│   │   ├── effects/            # 音效文件
│   │   ├── music/              # 背景音乐
│   │   └── voice/              # 语音文件
│   ├── models/                  # 3D模型
│   │   ├── characters/         # 角色模型
│   │   ├── objects/            # 物体模型
│   │   └── environments/       # 环境模型
│   ├── fonts/                   # 字体文件
│   │   ├── display/            # 展示字体
│   │   └── body/               # 正文字体
│   ├── favicon.svg             # 网站图标
│   ├── apple-touch-icon.svg    # Apple触摸图标
│   ├── icon-192x192.svg        # PWA图标192x192
│   ├── icon-512x512.svg        # PWA图标512x512
│   └── manifest.json           # PWA清单文件
├── config/                      # 配置文件
│   ├── site.ts                 # 站点配置
│   ├── social.ts               # 社交平台配置
│   ├── analytics.ts            # 分析配置
│   └── seo.ts                  # SEO配置
├── scripts/                     # 构建脚本
│   ├── build.ts                # 构建脚本
│   ├── deploy.ts               # 部署脚本
│   └── optimize.ts             # 优化脚本
├── tests/                       # 测试文件
│   ├── components/             # 组件测试
│   ├── utils/                  # 工具测试
│   └── e2e/                    # 端到端测试
├── docs/                        # 项目文档
│   ├── README.md               # 项目说明
│   ├── CONTRIBUTING.md         # 贡献指南
│   ├── DEPLOYMENT.md           # 部署指南
│   └── API.md                  # API文档
├── backup/                      # 备份文件
│   ├── views/                  # 原始博客内容
│   └── about/                  # 关于页面备份
├── package.json                 # 项目依赖
├── next.config.js              # Next.js配置
├── tailwind.config.js          # Tailwind配置
├── tsconfig.json               # TypeScript配置
├── .env.local                  # 环境变量
├── .gitignore                  # Git忽略文件
├── .cursorrules                # Cursor开发规则
└── README.md                   # 项目说明
```

### 核心应用文件
- `app/layout.tsx` - 根布局组件
- `app/page.tsx` - 首页组件
- `app/globals.css` - 全局样式
- `app/blog/` - 博客页面路由
- `app/projects/` - 项目展示页面路由
- `app/about/` - 关于页面路由
- `app/not-found.tsx` - 404错误页面
- `app/loading.tsx` - 全局加载页面
- `app/error.tsx` - 全局错误页面
- `app/api/` - API路由

### 组件系统
- `components/ui/` - 基础UI组件库
- `components/animations/` - 动画组件
- `components/three/` - 3D组件
- `components/layout/` - 布局组件
- `components/home/` - 首页组件
- `components/blog/` - 博客相关组件
- `components/projects/` - 项目相关组件
- `components/about/` - 关于页面组件
- `components/social/` - 社交平台组件

### 工具库
- `lib/animations/` - 动画工具库
- `lib/audio/` - 音频工具库
- `lib/three/` - 3D工具库
- `lib/utils/` - 通用工具库
- `lib/content/` - 内容管理工具

### 内容文件
- `content/blog/` - MDX博客文章（按分类组织）
- `content/projects/` - 项目文档
- `content/pages/` - 静态页面

### 样式系统
- `styles/globals.css` - 全局样式
- `styles/animations.css` - 动画样式
- `styles/components.css` - 组件样式
- `styles/themes/` - 主题样式文件

### 静态资源
- `public/images/` - 图片资源（优先使用SVG格式）
- `public/icons/` - SVG图标资源
- `public/audio/` - 音频资源
- `public/models/` - 3D模型
- `public/fonts/` - 字体文件
- `public/favicon.svg` - 网站图标
- `public/manifest.json` - PWA清单文件

### 配置文件
- `config/site.ts` - 站点配置
- `config/social.ts` - 社交平台配置
- `config/analytics.ts` - 分析配置
- `config/seo.ts` - SEO配置

### 开发工具
- `scripts/` - 构建和部署脚本
- `tests/` - 测试文件
- `docs/` - 项目文档
- `backup/` - 备份文件

## 现代化开发规则

### 1. 技术栈选择要求
- **Next.js 14 App Router**：使用最新的React渲染技术
- **TypeScript 5.x**：确保类型安全和代码质量
- **Tailwind CSS**：现代化CSS框架，快速开发
- **Anime.js 4.0**：极致动画体验，完美契合跨界探索者人设
- **Three.js + WebGPU**：未来感3D渲染和图形处理
- **WebAudio API**：音频交互系统，增强用户体验

### 2. 组件系统开发规范
- **组件化设计**：所有功能都要组件化，便于复用和维护
- **TypeScript类型**：所有组件都要有完整的类型定义
- **性能优化**：使用React.memo、useMemo、useCallback等优化性能
- **响应式设计**：确保在所有设备上都有良好的体验
- **可访问性**：遵循WCAG标准，确保无障碍访问

### 3. 动画系统开发规范
- **废柴动画预设**：建立完整的技术废柴自嘲动画库
- **跨界动画预设**：建立完整的跨界探索动画库
- **SVG动画支持**：优先使用SVG元素进行动画，支持路径动画、变形动画
- **anime.js集成**：充分利用anime.js对SVG的动画支持能力
- **性能优化**：使用Web Workers处理复杂动画计算
- **用户体验**：动画要流畅自然，不能影响页面性能
- **交互反馈**：每个用户操作都要有相应的动画反馈
- **主题一致性**：所有动画都要符合跨界探索者+技术废柴IP风格

### 4. 3D系统开发规范
- **Three.js集成**：使用React Three Fiber进行3D开发
- **WebGPU支持**：利用最新的图形API提升性能
- **交互设计**：3D元素要有良好的交互体验
- **性能优化**：使用LOD、实例化等技术优化3D性能
- **移动端适配**：确保3D内容在移动设备上流畅运行

### 5. 音频系统开发规范
- **WebAudio API**：使用原生Web Audio API
- **音效库**：建立完整的废柴+跨界探索音效库
- **性能优化**：音频加载和播放要高效
- **用户体验**：音效要符合技术废柴+跨界探索者IP特色
- **可控制性**：用户要能控制音频的开关和音量

### 6. 内容管理系统规范
- **MDX支持**：使用MDX进行内容创作
- **类型安全**：使用Contentlayer确保内容类型安全
- **SEO优化**：所有内容都要有良好的SEO结构
- **性能优化**：内容加载要快速，支持增量加载
- **多语言支持**：为未来的国际化做准备

### 7. SVG资源管理规范
- **SVG优先原则**：所有静态图标和简单图片优先使用SVG格式
- **动画友好**：SVG支持anime.js的路径动画、变形动画等高级效果
- **可缩放性**：SVG无损缩放，适配各种屏幕尺寸
- **文件优化**：使用SVGO等工具优化SVG文件大小
- **组件化**：将SVG图标封装为React组件，支持props控制
- **主题适配**：SVG支持动态颜色和主题切换
- **性能优势**：SVG文件小，加载快，渲染性能好

## 依赖管理
- 使用最新的稳定版本依赖包
- 优先选择TypeScript原生支持的库
- 确保依赖包之间的兼容性
- 定期更新依赖包到最新版本
- 使用pnpm作为包管理器，提升安装速度

## 跨界探索者IP特色要求

### 1. 内容风格
- **自黑幽默**：所有文案都要体现"技术废柴"的自嘲精神
- **诙谐风趣**：用轻松幽默的语言降低技术门槛
- **真实接地气**：展现真实的学习过程，包括踩坑经历
- **鼓励共鸣**：让其他"废柴"产生共鸣和归属感
- **技术深度**：在幽默包装下保持技术内容的专业性
- **创新进取**：体现"跨界探索者"的创新精神和探索欲望
- **专业严谨**：在轻松氛围中保持技术内容的专业性和准确性
- **跨界融合**：展现不同技术领域的跨界探索和融合

### 2. 视觉设计
- **未来感UI**：采用赛博朋克风格的设计语言
- **废柴主题色**：使用#ff6b6b等废柴主题色彩，体现自嘲幽默
- **探索配色**：融入探索元素的渐变和光效
- **霓虹光效**：添加霓虹灯效果和发光元素
- **3D交互**：使用Three.js和WebGPU创造沉浸式体验
- **动画丰富**：每个交互都有相应的动画反馈

### 3. 交互体验
- **废柴动画**：翻车、摆烂、报错等自嘲特色动画
- **探索动画**：创新、突破、成长等探索特色动画
- **音效系统**：废柴+探索双重音效库，增强沉浸感
- **实时反馈**：用户操作立即得到视觉和听觉反馈
- **社交整合**：深度整合各社交平台
- **品牌展示**：完整的GlimmerLab品牌展示系统

### 4. 用户体验
- **降低门槛**：用通俗易懂的方式解释技术概念
- **技术废柴交流**：让"废柴"们能轻松找到共鸣
- **探索者社区**：为跨界探索者提供交流平台
- **快速导航**：提供清晰的导航和搜索功能
- **互动性强**：鼓励用户参与评论和交流
- **加载迅速**：优化性能，确保快速加载
- **沉浸体验**：通过3D、动画、音效创造沉浸式体验
- **社交连接**：方便用户分享和连接到各社交平台

## 用户体验优化规则

### 1. 动画和视觉效果
- **流畅性**：所有动画必须60fps流畅运行，不能卡顿
- **性能优化**：使用CSS transform和opacity进行动画，避免重排重绘
- **渐进增强**：动画效果要渐进增强，不影响基础功能
- **响应式动画**：动画要根据设备性能自动调整复杂度
- **动画时长**：单个动画时长控制在300-800ms，避免过长
- **动画缓动**：使用合适的缓动函数，让动画更自然

### 2. 视觉渲染优化
- **GPU加速**：优先使用GPU加速的CSS属性
- **图层优化**：合理使用will-change和transform3d
- **SVG优先**：静态资源优先使用SVG格式，支持anime.js动画和更好渲染
- **图片优化**：使用WebP格式，实现懒加载和渐进加载
- **字体优化**：使用font-display: swap，避免字体闪烁
- **颜色对比度**：确保文字和背景的对比度符合WCAG标准
- **焦点状态**：所有可交互元素都要有清晰的焦点状态

### 3. 交互反馈
- **即时反馈**：用户操作后100ms内必须有视觉反馈
- **状态指示**：加载、成功、错误状态都要有明确的视觉指示
- **错误处理**：友好的错误提示，提供解决方案
- **键盘导航**：支持完整的键盘导航
- **触摸优化**：移动端触摸目标至少44px×44px
- **手势支持**：支持常见的触摸手势

### 4. 性能优化
- **首屏加载**：首屏内容加载时间控制在2秒内
- **代码分割**：合理使用代码分割，减少初始包大小
- **缓存策略**：实现合理的缓存策略
- **预加载**：关键资源使用preload预加载
- **懒加载**：非关键内容使用懒加载
- **内存管理**：及时清理事件监听器和定时器

### 5. 可访问性
- **语义化HTML**：使用正确的HTML语义标签
- **ARIA标签**：为复杂组件添加ARIA标签
- **屏幕阅读器**：确保屏幕阅读器能正确读取内容
- **键盘操作**：所有功能都支持键盘操作
- **高对比度**：支持高对比度模式
- **字体缩放**：支持浏览器字体缩放

## 完整功能要求 (绝对不能简化)
- **搜索功能**：完整的本地搜索和第三方搜索
- **Google Analytics**：完整的统计分析配置
- **PWA 支持**：完整的离线支持和应用化体验
- **代码复制**：完整的代码高亮和复制功能
- **MDX 增强**：所有原有的Markdown扩展功能
- **自定义组件**：废柴动画、跨界探索动画、3D交互、音效系统等所有组件
- **SVG图标系统**：完整的SVG图标库，支持anime.js动画和主题切换
- **社交平台整合**：B站、小红书、抖音、GitHub等平台深度整合
- **GlimmerLab品牌展示**：完整的品牌展示和项目介绍
- **响应式设计**：完整的移动端和桌面端适配
- **主题切换**：日夜模式、赛博朋克主题等多主题支持
- **评论系统**：完整的评论交互功能
- **社交分享**：完整的分享功能
- **SEO优化**：完整的搜索引擎优化
- **性能优化**：完整的加载和缓存优化
- **3D交互系统**：Three.js + WebGPU的沉浸式体验
- **音频系统**：WebAudio API的废柴+跨界探索音效库
- **动画系统**：Anime.js的极致动画体验

## 严格禁止事项
1. **绝对不能删除**任何核心功能
2. **绝对不能简化**任何技术实现
3. **绝对不能降低**用户体验标准
4. **绝对不能破坏**任何链接或导航
5. **绝对不能忽略**移动端兼容性
6. **绝对不能删减**任何动画效果
7. **绝对不能省略**任何交互细节
8. **绝对不能妥协**技术废柴+跨界探索者IP特色
9. **绝对不能忽视**性能优化要求
10. **绝对不能忽略**社交平台整合
11. **绝对不能使用**非SVG格式的静态图标（除非特殊需求）
12. **绝对不能忽略**SVG动画的anime.js集成
13. **绝对不能自动创建**总结文档、测试脚本、验证脚本等非核心功能文件
14. **绝对不能创建**不必要的文档和脚本，除非用户明确要求
15. **绝对不能自动创建**测试页面、演示页面、示例页面等非用户明确要求的页面
16. **绝对不能创建**任何形式的测试文件，包括但不限于：测试页面、测试脚本、验证脚本、演示文件、示例文件
17. **绝对不能违反**用户明确提出的"不能创建脚本"等要求
18. **绝对不能创建**任何非核心功能的文件，除非用户明确授权
19. **绝对不能创建**任何形式的修复脚本、优化脚本、自动化脚本，除非用户明确要求
20. **绝对不能创建**任何形式的构建脚本、部署脚本、测试脚本，除非用户明确要求
21. **绝对不能创建**任何形式的工具脚本、辅助脚本、维护脚本，除非用户明确要求
22. **绝对不能创建**任何形式的调试脚本、诊断脚本、问题解决脚本，除非用户明确要求
23. **绝对不能创建**任何形式的脚本文件，包括但不限于：.js、.ts、.sh、.bat、.ps1等，除非用户明确要求

## 现代化开发优先级
1. **项目初始化阶段**：Next.js项目创建、技术栈配置、项目结构搭建
2. **核心组件开发**：基础UI组件、布局组件、导航组件
3. **SVG图标系统开发**：SVG图标库、组件化封装、主题适配
4. **动画系统开发**：Anime.js集成、废柴+跨界探索动画预设、动画管理器
4. **3D系统开发**：Three.js集成、WebGPU支持、3D交互组件
5. **音频系统开发**：WebAudio API集成、废柴+跨界探索音效库、音频管理器
6. **内容系统开发**：MDX支持、内容管理、博客系统
7. **社交平台整合**：各平台API集成、分享功能、状态显示
8. **GlimmerLab品牌页面**：品牌展示、项目介绍、联系表单
9. **性能优化阶段**：代码分割、缓存策略、加载优化
10. **测试与部署**：全面测试、性能监控、生产部署

## 开发服务器管理规则
- **开发服务器已启动**：项目使用 `npm run dev` 启动，支持热重载
- **避免重复启动**：不要重复执行 `npm run dev` 命令
- **热重载优势**：代码修改后自动刷新，无需手动重启
- **端口检查**：如需检查服务器状态，使用 `netstat -ano | findstr :3000`
- **错误处理**：如遇启动错误，先检查依赖冲突和配置文件

## 质量保证要求
1. **代码质量**：高质量、可维护、可扩展的TypeScript代码
2. **性能优化**：快速加载、流畅交互、低内存占用
3. **兼容性**：现代浏览器全兼容、移动端完美适配
4. **可访问性**：符合WCAG无障碍访问标准
5. **SEO友好**：完整的搜索引擎优化
6. **安全性**：代码安全、数据安全、API安全
7. **可维护性**：清晰的代码结构、完整的注释文档
8. **用户体验**：流畅的动画、响应式设计、直观的交互
9. **技术前沿**：使用最新的Web技术和最佳实践
10. **IP一致性**：所有功能都要符合技术废柴+跨界探索者IP特色

## 跨界探索者精神体现
- **学习态度**：把复杂的技术用简单的方式表达
- **分享精神**：把踩过的坑变成别人的经验
- **自嘲幽默**：用轻松的方式面对技术挑战
- **持续进步**：从"废柴"到"大神"的成长过程
- **社区建设**：打造"废柴"们的技术交流平台
- **技术追求**：用最前沿的技术实现最有趣的功能
- **创新精神**：在技术废柴的道路上不断创新
- **真实表达**：展现真实的技术学习过程和成长轨迹
- **包容开放**：欢迎所有"废柴"加入技术学习社区
- **未来愿景**：用技术创造更美好的数字世界

## 现代化技术栈具体要求

### Next.js 14 开发规范
- **App Router**：使用最新的App Router架构
- **Server Components**：合理使用服务端组件和客户端组件
- **Streaming**：实现流式渲染，提升用户体验
- **Image Optimization**：使用Next.js内置的图片优化
- **Font Optimization**：使用Next.js字体优化功能
- **Metadata API**：使用新的元数据API进行SEO优化

### TypeScript 5.x 开发规范
- **严格模式**：启用所有TypeScript严格检查
- **类型定义**：为所有组件、函数、变量提供完整类型
- **接口设计**：设计清晰的接口和类型定义
- **泛型使用**：合理使用泛型提高代码复用性
- **类型推断**：充分利用TypeScript的类型推断能力

### 动画系统开发规范
- **Anime.js 4.0**：使用最新版本的Anime.js
- **SVG动画支持**：充分利用anime.js对SVG路径、变形、颜色等属性的动画支持
- **性能优化**：使用requestAnimationFrame和Web Workers
- **内存管理**：及时清理动画实例，避免内存泄漏
- **用户体验**：动画要流畅自然，不能影响页面性能
- **主题一致性**：所有动画都要符合技术废柴+跨界探索者IP风格

### SVG资源开发规范
- **SVG优化**：使用SVGO等工具优化SVG文件大小和结构
- **组件化设计**：将SVG图标封装为React组件，支持className、color等props
- **动画集成**：SVG组件支持anime.js动画，包括路径动画、变形动画等
- **主题适配**：SVG支持动态颜色切换，适配不同主题
- **响应式设计**：SVG图标支持不同尺寸的响应式显示
- **可访问性**：为SVG图标添加适当的ARIA标签和语义化描述

### 3D系统开发规范
- **React Three Fiber**：使用React Three Fiber进行3D开发
- **WebGPU支持**：利用WebGPU提升3D渲染性能
- **LOD系统**：实现细节层次系统，优化性能
- **实例化渲染**：使用实例化技术渲染大量对象
- **移动端优化**：确保3D内容在移动设备上流畅运行

### 音频系统开发规范
- **WebAudio API**：使用原生WebAudio API
- **音频格式**：支持多种音频格式，优先使用WebM和MP3
- **音量控制**：提供用户音量控制功能
- **音频缓存**：实现音频资源的智能缓存
- **性能优化**：避免音频加载影响页面性能

### 社交平台整合规范
- **API设计**：设计统一的社交平台API接口
- **数据同步**：实现各平台数据的实时同步
- **分享功能**：支持一键分享到各社交平台
- **状态显示**：实时显示各平台的状态信息
- **用户授权**：安全的用户授权和认证机制

### 性能优化规范
- **代码分割**：实现合理的代码分割策略
- **懒加载**：图片、组件、路由的懒加载
- **缓存策略**：合理的缓存策略和缓存失效机制
- **CDN使用**：使用CDN加速静态资源加载
- **监控分析**：实时监控和分析性能指标

### 9. 组件重复预防规则
**绝对禁止**：在页面组件中重复定义已经在根布局中存在的组件。

**组件重复检查清单**：
1. **根布局组件**：Header、Footer、背景动画、鼠标跟随等全局组件
2. **页面组件**：只包含页面特定的内容组件
3. **布局结构**：确保页面组件不包含重复的布局结构

**预防措施**：
- 检查根布局 (`app/layout.tsx`) 中已定义的组件
- 页面组件只导入页面特定的内容组件
- 避免在页面中重复定义 Header、Footer 等全局组件
- 使用 Next.js App Router 的布局嵌套机制

**错误修复流程**：
1. **识别重复组件**：检查哪些组件被重复定义
2. **移除重复定义**：从页面组件中移除重复的组件
3. **保持功能完整**：确保移除后功能不受影响
4. **测试验证**：测试所有页面确保正常显示

### 10. 问题修复总结和文档化规则
**绝对要求**：每次修复问题后，必须进行系统性总结和文档化。

**总结文档结构**：
```
✅ 已修复的问题
- 具体问题描述
- 修复的具体操作
- 根本原因分析

🛡️ 建立的预防规则
- 新增的规则和检查清单
- 架构改进和优化
- 预防措施和流程

🔍 为什么会出现这个问题
- 技术层面的原因
- 流程和规范层面的原因
- 团队协作层面的原因

📚 学到的教训
- 技术教训
- 流程教训
- 管理教训

📖 文档化要求
- 更新技术文档
- 创建业务手册
- 建立面试题库
```

**文档化要求**：
1. **技术文档**：更新 `docs/` 目录下的技术文档
2. **业务手册**：创建业务实践手册，记录最佳实践
3. **面试题库**：建立技术面试题库，包含常见问题和解决方案
4. **规则更新**：及时更新 `.cursorrules` 文件
5. **知识库**：建立团队知识库，避免重复犯错

**面试和业务手册内容**：
- 问题解决思路和方法论
- 技术架构设计原则
- 代码质量控制标准
- 团队协作最佳实践
- 项目管理经验总结

### 11. 内容管理规范
**绝对要求**：所有博客文章必须遵循统一的内容管理规范。

**Frontmatter标准**：
- **标题规范**：所有文章必须有明确的标题，不能出现"未命名文章"
- **描述要求**：文章描述必须详细且有意义，不能少于10个字符
- **分类体系**：建立统一的文章分类体系，确保每篇文章都有正确的分类
- **标签管理**：每篇文章必须有相关的标签，便于分类和搜索
- **作者信息**：所有文章必须包含作者信息（author: 'LJoson'）
- **发布状态**：文章必须有明确的发布状态（status: 'published'）
- **日期管理**：每篇文章必须有明确的发布日期
- **特色标记**：重要文章需要标记为特色文章（featured: true）

**分类体系标准**：
- **AI技术**：人工智能、机器学习、深度学习相关文章
- **游戏开发**：Unity、UE5、游戏设计相关文章
- **学习笔记**：技术学习、经验总结相关文章
- **计算机技术**：系统、工具、开发环境相关文章
- **算法学习**：数据结构、算法、LeetCode相关文章
- **前端开发**：Web开发、前端技术相关文章
- **编程语言**：各种编程语言相关文章
- **硬件电子**：硬件、嵌入式、电子相关文章
- **杂谈**：经验分享、个人成长相关文章

**内容质量要求**：
- **完整性**：文章内容必须完整，不能有缺失的部分
- **准确性**：技术内容必须准确，避免错误信息
- **可读性**：文章结构清晰，语言通俗易懂
- **实用性**：文章内容对读者有实际价值
- **一致性**：保持技术废柴+跨界探索者IP特色

**批量处理工具**：
- **修复脚本**：`scripts/fix-blog-frontmatter.js` 用于批量修复文章frontmatter
- **检查机制**：建立文章发布前的元数据完整性检查机制
- **自动化**：提供批量修复和更新内容的工具脚本

### 12. 文件删除确认规则
**绝对要求**：在删除任何文件之前，必须获得用户的明确确认。

**删除确认流程**：
1. **识别文件**：明确标识要删除的文件路径和名称
2. **说明原因**：详细说明为什么认为这个文件可以删除
3. **用户确认**：等待用户明确确认是否删除
4. **执行删除**：只有在用户确认后才执行删除操作
5. **记录操作**：在文档中记录删除的文件和原因

**禁止删除的文件类型**：
- **历史备份文件**：backup目录下的文件，除非用户明确要求
- **配置文件**：项目配置文件，如package.json、tsconfig.json等
- **文档文件**：README.md、文档说明等
- **用户创建的内容**：用户明确创建或修改的文件
- **重要数据文件**：包含重要数据或配置的文件

**特殊情况**：
- **临时文件**：可以删除临时生成的文件，但需要说明
- **重复文件**：可以建议删除重复文件，但需要用户确认
- **过时文件**：可以建议删除过时文件，但需要用户确认

**错误处理**：
- 如果误删了文件，立即通知用户并尝试恢复
- 记录误删的文件和恢复操作
- 更新删除确认流程，避免类似错误

### 13. 博客风格要求规范
**绝对要求**：所有博客文章必须遵循统一的风格要求，确保内容质量和IP特色。

## 🎨 风格要求

### 标题和描述要求
**绝对禁止**：千篇一律的标题和描述格式。

**标题设计原则**：
- **多样化表达**：避免使用相同的标题模板
- **吸引力优先**：使用有趣、吸引人的表达方式
- **技术准确性**：确保标题准确反映文章内容
- **IP特色体现**：融入技术废柴+跨界探索者特色
- **长度适中**：标题长度控制在20-40字之间

**标题示例对比**：
```markdown
# ❌ 千篇一律的标题（禁止）
- "XXX技术指南：从技术废柴到专家的成长之路"
- "XXX实战教程：技术废柴的踩坑经历"
- "XXX入门指南：从零开始的学习笔记"

# ✅ 多样化吸引人的标题（推荐）
- "🎯 YOLOv4 GUI开发完全指南：Qt+OpenCV目标检测界面实战"
- "🎨 跨界创作：用AI生成游戏素材"
- "🤖 AI提示词指南：让ChatGPT成为你的编程助手"
- "🏆 2020百度之星开发者大赛：从废柴到NO.6的逆袭之路"
- "🎮 机器人仿真技术指南：从技术废柴到仿真专家的成长之路"
- "🚀 目标检测模型部署指南：从技术废柴到部署专家的成长之路"
```

**描述设计原则**：
- **个性化表达**：每篇文章都有独特的描述风格
- **内容概括**：准确概括文章核心内容
- **吸引力增强**：使用吸引人的表达方式
- **长度控制**：描述长度控制在50-100字之间
- **避免重复**：不使用相同的描述模板

**描述示例对比**：
```markdown
# ❌ 千篇一律的描述（禁止）
- "作为一个技术废柴，我从零开始学习XXX，记录在XXX中的踩坑经历。从'这XXX怎么用'到'我的XXX项目'，记录我的XXX进化史和跨界探索历程。"
- "使用XXX技术进行XXX，记录我在XXX道路上的探索历程。从'这XXX怎么跑'到'我的XXX系统'，分享技术废柴在XXX领域的成长轨迹。"

# ✅ 个性化吸引人的描述（推荐）
- "使用生成对抗网络(GAN)将真实照片转换为卡通风格，记录我在AI艺术创作道路上的探索历程。从'这照片怎么变卡通'到'我的AI艺术作品'，分享技术废柴在创意领域的成长轨迹。"
- "参与TAAC2021腾讯广告算法大赛，开发基线系统，记录我在广告算法竞赛道路上的探索历程。从'这比赛怎么打'到'我的基线系统'，分享技术废柴在广告算法竞赛领域的成长轨迹。"
- "将训练好的目标检测模型部署到生产环境，记录我在模型部署道路上的探索历程。从'这模型怎么部署'到'我的生产系统'，分享技术废柴在部署领域的成长轨迹。"
```

### 小标题设计要求
**绝对禁止**：千篇一律的小标题格式和表达方式。

**小标题设计原则**：
- **多样化表达**：避免使用相同的小标题模板
- **吸引力优先**：使用有趣、吸引人的表达方式
- **逻辑清晰**：确保小标题之间的逻辑关系清晰
- **长度适中**：小标题长度控制在5-15字之间
- **风格统一**：保持与文章整体风格的一致性

**小标题示例对比**：
```markdown
# ❌ 千篇一律的小标题（禁止）
- "第一阶段：懵逼期"
- "第二阶段：入门期"
- "第三阶段：实践期"
- "技术实现"
- "性能优化"
- "经验总结"

# ✅ 多样化吸引人的小标题（推荐）
- "当技术废柴遇见XXX"
- "那个让我'翻车'的夜晚"
- "🚀 从零开始的XXX之路"
- "🎯 我的第一个XXX项目"
- "🔧 技术实现：从简单到复杂"
- "📊 性能优化：从'龟速'到'闪电'"
- "🐛 常见问题与解决方案"
- "📈 实际应用效果"
- "🎯 经验总结与反思"
- "🚀 给其他学习者的建议"
```

**小标题风格要求**：
- **情感化表达**：使用情感化的表达方式
- **故事化叙述**：采用故事化的叙述风格
- **技术准确性**：确保技术内容的准确性
- **视觉吸引力**：使用emoji和符号增强视觉效果
- **逻辑层次**：保持清晰的逻辑层次结构

### 语言特点
- **专业性**：技术描述准确，术语使用规范
- **可读性**：通俗易懂，避免过度学术化
- **启发性**：从技术中自然提取洞察
- **美观性**：不能千篇一律，每一篇都确保是独立完整的文章
- **IP特色**：符合技术废柴IP特色但不用千篇一律突显技术废柴文字
- **灵活性**：根据内容灵活描述，有技术废柴的行文风格
- **情感表达**：调侃、灵活、诙谐、自黑等风格混用

### 内容结构要求
- **标题设计**：使用emoji+技术关键词+IP特色的标题格式
- **前言部分**：每篇文章必须有前言，说明写作目的和内容概述
- **技术深度**：根据文章类型调整技术深度，从入门到进阶
- **实践导向**：根据内容场景合理使用代码示例和实际应用
- **经验分享**：融入个人踩坑经验和学习心得
- **总结反思**：每篇文章必须有总结部分，包含教训、收获和规划
- **美观性**：确保文章结构清晰、排版美观、可读性强

### 技术内容要求
- **代码示例**：仅在技术教程、算法实现、配置说明等场景下提供完整可运行的代码示例
- **配置说明**：详细的配置步骤和环境要求
- **错误处理**：包含常见错误和解决方案
- **最佳实践**：总结最佳实践和注意事项
- **参考资料**：提供权威的参考资料和链接

### 美观性要求
- **结构美观**：
  - 使用清晰的标题层级（H1、H2、H3）
  - 段落长度适中，避免过长或过短
  - 合理使用列表、引用、代码块等元素
  - 保持逻辑层次清晰，便于阅读

- **排版美观**：
  - 使用适当的空行分隔不同段落
  - 代码块要有语法高亮和语言标识
  - 表格要格式整齐，内容对齐
  - 图片要有清晰的描述和合适的尺寸

- **内容美观**：
  - 语言表达流畅自然，避免生硬
  - 使用emoji和符号增强视觉效果
  - 重点内容使用加粗、斜体等格式突出
  - 保持整体风格一致，符合技术废柴IP特色

- **可读性要求**：
  - 避免过长的句子和段落
  - 使用简洁明了的表达方式
  - 适当使用分点、列表提高可读性
  - 确保在不同设备上都有良好的阅读体验

### 代码示例使用原则
- **适用场景**：
  - 技术教程：编程语言、框架、工具的使用教程
  - 算法实现：数据结构、算法、数学公式的代码实现
  - API使用：第三方库、服务、接口的调用示例
  - 配置说明：环境配置、工具配置、系统设置
  - 错误修复：常见错误的具体解决方案
  - 性能优化：代码优化、算法优化、系统优化

- **不适用场景**：
  - 纯经验分享：学习方法、心态调整、职业规划
  - 团队协作：沟通技巧、项目管理、团队建设
  - 个人感悟：生活感悟、思考总结、哲学思考
  - 概念介绍：理论概念、思想方法、思维方式

- **使用原则**：
  - 代码示例应该服务于技术内容，而不是为了展示而展示
  - 优先使用简洁、易懂、可运行的代码
  - 避免过度复杂的代码示例，影响阅读体验
  - 确保代码示例与文章主题高度相关

- **质量要求**：
  - 代码示例必须准确、可运行、有实际价值
  - 提供必要的注释和说明
  - 考虑不同读者的技术水平
  - 避免使用过时或已废弃的API

## 🚫 严格禁止的千篇一律问题

### 标题千篇一律
- **禁止**：所有文章都使用相同的标题模板
- **要求**：每篇文章都要有独特的标题设计
- **示例**：
  - ❌ "XXX技术指南：从技术废柴到专家的成长之路"
  - ✅ "🎯 YOLOv4 GUI开发完全指南：Qt+OpenCV目标检测界面实战"

### 描述千篇一律
- **禁止**：所有文章都使用相同的描述模板
- **要求**：每篇文章都要有独特的描述风格
- **示例**：
  - ❌ "作为一个技术废柴，我从零开始学习XXX..."
  - ✅ "使用生成对抗网络(GAN)将真实照片转换为卡通风格..."

### 小标题千篇一律
- **禁止**：所有文章都使用相同的小标题模板
- **要求**：每篇文章都要有独特的小标题设计
- **示例**：
  - ❌ "第一阶段：懵逼期"、"第二阶段：入门期"
  - ✅ "当技术废柴遇见XXX"、"那个让我'翻车'的夜晚"

### 结构千篇一律
- **禁止**：所有文章都使用相同的"第一阶段、第二阶段、第三阶段"结构
- **要求**：根据内容特点灵活设计结构，可以是：
  - 问题导向：问题→分析→解决→总结
  - 技术深度：基础→进阶→实战→优化
  - 故事叙述：背景→挑战→探索→突破
  - 对比分析：方案A→方案B→对比→选择
  - 实战案例：需求→设计→实现→测试→部署

### 表达方式千篇一律
- **禁止**：所有文章都使用相同的"那时候的我"、"我的踩坑经历"等固定句式
- **要求**：灵活运用多种表达方式：
  - 对话式：通过对话展现学习过程
  - 故事式：用故事化的方式描述经历
  - 对比式：通过对比突出差异
  - 案例式：用具体案例说明问题
  - 反思式：从反思中提取经验

### 技术描述千篇一律
- **禁止**：所有技术都用相同的"就像..."比喻方式
- **要求**：根据技术特点选择合适描述方式：
  - 类比法：用生活中的例子类比
  - 对比法：与其他技术对比
  - 故事法：用故事说明技术原理
  - 图表法：用图表可视化概念
  - 代码法：仅在技术教程、算法实现等场景下用代码直接说明

### 情感表达千篇一律
- **禁止**：所有文章都使用相同的自嘲和幽默方式
- **要求**：根据内容调整情感表达：
  - 技术探索：好奇、兴奋、困惑
  - 问题解决：焦虑、思考、释然
  - 项目完成：成就感、反思、展望
  - 学习成长：挫折、坚持、突破
  - 团队协作：冲突、理解、合作

### 排版格式千篇一律
- **禁止**：所有文章都使用相同的排版格式和结构
- **要求**：根据内容特点灵活设计排版：
  - 技术教程：步骤清晰、代码突出、重点标记
  - 经验分享：故事化叙述、情感表达、反思总结
  - 技术分析：对比表格、数据展示、逻辑推理
  - 项目展示：图文并茂、流程清晰、成果突出
  - 学习笔记：条理分明、重点突出、便于复习

## 🎯 个性化要求

### 文章类型差异化
- **教程类文章**：重点在步骤清晰、示例丰富
- **经验分享类**：重点在真实经历、深度反思
- **技术分析类**：重点在原理深入、对比分析
- **项目实战类**：重点在完整流程、实用技巧
- **学习总结类**：重点在知识梳理、方法提炼

### 技术领域差异化
- **AI/ML文章**：突出算法原理、模型理解、实验设计
- **Web开发文章**：突出架构设计、性能优化、用户体验
- **系统运维文章**：突出稳定性、监控、故障处理
- **游戏开发文章**：突出创意实现、性能优化、用户体验
- **硬件电子文章**：突出电路设计、调试技巧、实际应用

### 写作风格差异化
- **深度技术**：严谨、详细、专业
- **入门教程**：友好、耐心、鼓励
- **经验分享**：真实、反思、启发
- **项目展示**：自信、创新、实用
- **学习笔记**：条理、总结、复习

### 美观性差异化
- **技术教程**：代码高亮、步骤编号、重点突出
- **经验分享**：故事化排版、情感表达、个人色彩
- **技术分析**：对比表格、数据可视化、逻辑清晰
- **项目展示**：图文并茂、流程图表、成果展示
- **学习笔记**：条理分明、重点标记、便于查阅

## 📊 数学公式格式

### 行内公式
使用 `$公式$` 格式

**示例**：
- 损失函数：$L = \frac{1}{N}\sum_{i=1}^{N}(y_i - \hat{y}_i)^2$
- 梯度下降：$\theta_{t+1} = \theta_t - \alpha \nabla J(\theta_t)$
- 激活函数：$f(x) = \frac{1}{1 + e^{-x}}$

### 块级公式
使用 `$$公式$$` 格式，并在前后添加适当说明

**示例**：
```markdown
对于目标检测任务，损失函数定义为：

$$L_{total} = L_{cls} + L_{reg} + L_{obj}$$

其中：
- $L_{cls}$ 是分类损失
- $L_{reg}$ 是回归损失
- $L_{obj}$ 是目标性损失
```

### 公式说明要求
- **所有公式参数都要有清晰定义**
- **每个变量都要有清晰定义**
- **避免过度哲学化的解释**
- **专注于技术含义**
- **提供实际应用场景**

### 公式类型规范
- **机器学习公式**：损失函数、优化算法、评估指标
- **深度学习公式**：激活函数、反向传播、正则化
- **统计公式**：概率分布、假设检验、置信区间
- **算法公式**：时间复杂度、空间复杂度、递归关系

## 📱 知乎兼容性优化

### 格式简化要求
- **避免复杂嵌套**：简化列表结构，避免多层缩进
- **简化表格**：移除复杂的边框和分隔符
- **统一格式**：使用一致的列表符号和表情符号
- **保持可读性**：在美观和兼容性之间找到平衡

### 列表格式规范
```markdown
# 推荐格式（知乎兼容）
- 第一级列表
  - 第二级列表
    - 第三级列表

# 避免格式（知乎不兼容）
1. 第一级列表
   1.1 第二级列表
      1.1.1 第三级列表
```

### 表格格式规范
```markdown
# 推荐格式（知乎兼容）
| 列1 | 列2 | 列3 |
|-----|-----|-----|
| 内容1 | 内容2 | 内容3 |

# 避免格式（知乎不兼容）
+-------+-------+-------+
| 列1   | 列2   | 列3   |
+-------+-------+-------+
| 内容1 | 内容2 | 内容3 |
+-------+-------+-------+
```

### 代码块规范
```markdown
# 推荐格式（知乎兼容）
```python
def example():
    return "Hello World"
```

# 避免格式（知乎不兼容）
~~~python
def example():
    return "Hello World"
~~~
```

### 图片和链接规范
- **图片描述**：为所有图片添加清晰的描述文字
- **链接格式**：使用标准的Markdown链接格式
- **外部链接**：标注外部链接，提供链接说明
- **图片优化**：确保图片大小适中，加载速度快

### 表情符号使用规范
- **适度使用**：表情符号用于增强表达，不要过度使用
- **统一风格**：使用一致的表情符号风格
- **语义匹配**：表情符号要与内容语义匹配
- **平台兼容**：选择各平台都支持的表情符号

### 特殊字符处理
- **数学符号**：使用Unicode数学符号，确保跨平台兼容
- **特殊标点**：使用标准的中文标点符号
- **空格处理**：避免使用特殊空格字符
- **换行处理**：使用标准的换行符

### 内容适配策略
- **分段优化**：合理分段，避免过长的段落
- **标题层级**：使用清晰的标题层级结构
- **重点突出**：使用加粗、斜体等方式突出重点
- **引用格式**：使用标准的引用格式

### 测试验证要求
- **多平台测试**：在知乎、微信公众号、博客等多个平台测试
- **格式检查**：检查格式在不同平台的显示效果
- **链接验证**：验证所有链接的有效性
- **图片检查**：确保图片在各平台正常显示
